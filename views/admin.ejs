<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
    />
    <link rel="stylesheet" href="/global.css">
</head>
<body>
  <div class="layout">
    <%- include('partials/navbar'); %>
    
    <div class="main">
      <div class="panel">
        
        <h2>ADMIN</h2>
        <div class="render-content" data-render="dashboard">
          <span class="material-symbols-outlined">dashboard</span>
          <button>Přehled</button>
        </div>
        <div class="render-content" data-render="users">
          <span class="material-symbols-outlined">group</span>
          <button>uživatelé</button>
        </div>
        <div class="render-content" data-render="tests">
          <span class="material-symbols-outlined">quiz</span>
          <button>testy</button>
        </div>
        <!-- <div class="render-content" data-render="map">
          <span class="material-symbols-outlined">map</span>
          <button>katalog</button>
        </div> -->
        <!-- <div class="render-content" data-render="library">
          <span class="material-symbols-outlined">library_add</span>
          <button>knihovna</button>
        </div> -->
        <!-- <div class="render-content" data-render="admin">
          <span class="material-symbols-outlined">admin_panel_settings</span>
          <button>administrace</button>
        </div> -->
      </div>
      <div class="content-wrapper dashboard">
        <h2>Přehled</h2>
        <div class="stats-wrapper">
          <div class="stats stats-users">
            <h3>Celkem registrovaných uživatelů</h3>
            <div id="stats-total-users"></div>
          </div>
          <div class="stats stats-tests">
            <h3>Celkem vytvořených testů</h3>
            <div id="stats-total-tests"></div>
          </div>
        </div>
      </div>
      <div class="content-wrapper users">
        <h2>Uživatelé</h2>
        <h3>Vyhledat uživatele podle emailu</h3>
        <div class="searchbar">
          <input type="text" placeholder="Email uživatele">
          <button class="material-symbols-outlined" onclick="getUserByEmail()">search_check</button>
        </div>
        <div id="found-user"></div>
        <div class="table-wrapper">
          <table id="user-table" class="table">
            <thead>
              <tr class="row100 head">
                <th class="cell100 column1">Email
                </th>
                <th class="cell100 column2">Role
                </th>
                <th class="cell100 column3">
                </th>
              </tr>
            </thead>
            <tbody>
            </tbody>
          </table>
          </div>
          <button id="load-more-users" class="btn btn--gray" onclick="getAllUsers()">Načíst další</button>
      </div>
      <div class="content-wrapper tests">
        <h2>Testy</h2>
        <div class="table-wrapper">
          <table id="test-table" class="table">
            <thead>
              <tr class="row100 head">
                <th class="cell100 column1">Autor
                </th>
                <th class="cell100 column2">Název testu
                </th>
                <th class="cell100 column3">
                </th>
              </tr>
            </thead>
            <tbody>
            </tbody>
          </table>
          </div>
          <button id="load-more-tests" class="btn btn--gray" onclick="getAllTests()">Načíst další</button>
      </div>
      <div class="content-wrapper map">
        <h2>Katalog map</h2>        
      </div>
      <div class="content-wrapper library">
        <h2>Knihovna pojmů</h2>        
      </div>
      <div class="content-wrapper admin">
        <h2>Administrace</h2>
        <h3>Vyhledat uživatele podle emailu</h3>
        <div class="searchbar">
          <input type="text" placeholder="Email uživatele">
          <button class="material-symbols-outlined" onclick="getUserByEmail()">search_check</button>
        </div>
        <div id="found-user"></div>
    </div>
  </div>

</body>
</html>

<style>
  .main {
    background-color: white;
    display:grid;
    grid-template-columns: 300px 1fr;
  }

  .btn {
    border: none;
    outline: none;
    border-radius: 0.25rem;
    padding: 0.65rem 1rem;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: uppercase;
    cursor: pointer;
  }

  .btn--blue {
    background-color: #4d3df7;
    color: #e9e9e9;
  }

  .btn--blue:hover {
    background-color: #4333f5;
  }

  .btn--gray:hover {
    background-color: #e7e7e7;
  }

  #load-more-tests, #load-more-users {
    margin-top: 1rem;
    min-width: 12rem;
    height: 3rem;
    font-size: 0.9rem;
  }


  .panel {
    background: rgb(245,245,245);
    padding: 1rem;
  }

  .panel button {
    border: none;
    outline: none;
    background-color: inherit;
    color: rgb(83, 83, 83);
    font-weight: 500;
    font-size: 1.1rem;
    text-transform: capitalize;
  }

  .panel div {
    display: flex;
    padding: 0.75rem 1.5rem;
    align-items: center;
    gap: 1rem;
    text-transform: capitalize;
  }

  .panel div:hover {
    background-color: rgb(231, 231, 231);
    cursor:pointer;
    border-radius: 0.5rem;
  }

  .panel div:hover > * {
    cursor:pointer
  }

  .panel div span {
    font-weight: 500;
  }

  .panel h2 {
    text-align: center;
    color: rgb(83, 83, 83);
    font-size: 1rem;
    margin: 1rem;
    padding-bottom: 1rem;
    border-bottom: 4px solid rgb(236, 236, 236);
  }

  .panel h2 span {
    font-size: 2.75rem;
    position: relative;
    top: 0.5rem;
    left: -0.5rem;
  }

  .content-wrapper {
    padding:2rem;
  }

  .content-wrapper.tests, .content-wrapper.map,.content-wrapper.library,.content-wrapper.admin, .content-wrapper.users  {
    display:none;
  }

  .content-wrapper h2 {
    color: rgb(83, 83, 83);
    font-size: 2.5rem;
    margin-bottom: 1rem;
    border-bottom: 4px solid #f3f3f3;
    padding-bottom: 1rem;
  }

  .stats-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  .stats {
    padding:2.5rem;
    background-color: #e9e9e9;
    border-radius: 0.5rem;
  }
  .stats div {
    font-size: 4rem;
    color: #4333f5;
  }

  @media only screen and (max-width: 900px) {
    .stats-wrapper {
      grid-template-columns: 1fr ;
    }  
    .main {
      grid-template-columns: auto 1fr;
    }
    .panel {
      padding: 0 1rem;
    }
  }
  @media only screen and (max-width: 600px) {
    .main {
      grid-template-columns: 1fr;
    }
  }

  /* TABLE */

  .table-wrapper {
    overflow-x:auto;
    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;
    max-width: 50rem;
    margin-top: 0.5rem;
  }

  table {
      border-collapse: collapse;
      width: 100%;
      max-width: 50rem;
    }
    th,
    td {
      padding: 8px;
      text-align: left;
    
    }
    th {
      background-color: #4f4f4f;
      color: rgb(250, 250, 250);
      font-size: 1rem;
      font-weight: 500;
    }
  
    td button {
      border: none;
      outline: none;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 0.25rem;
      background-color: #ffd2d2;
      color: #f34242;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.8rem;
    }
  
  table tr:nth-child(even) {
      background-color: #f8f6ff;
  }
  
  .column1 {
    width:45%;
  }
  .column1 {
    width:45%;
  }
  .column3 {
    width:20%;
  }
  th:nth-child(1) {
    border-radius:0.5rem 0 0 0;
  }
  th:nth-child(3) {
    border-radius:0 0.5rem 0 0;
  }

  tr td:nth-of-type(3) {
    text-align: center;
  }

  .styled-table tbody tr {
    box-shadow: 0px 0px 9px 0px rgba(0,0,0,0.1);
  }

  .searchbar {
    background-color:rgb(235,235,235);
    max-width:20rem;
    display:flex;
    justify-content:space-between;
    border-radius:0.3rem;
    padding:0.5rem;  
  }
  .searchbar input {
    outline:none;
    border:none;
    font-size:1rem;
    font-weight:600;
    background-color:inherit;
    color:rgb(70,70,70);
    flex:1;
  }
  
  .searchbar button {
    outline:none;
    border:none;
    color:rgb(110,110,110);
    background-color:inherit;
    cursor:pointer;
    font-weight:600;
  }

  .content-wrapper h3 {
    font-size: 1.5rem;
    color: #707070;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }
  .red-bg {
    color: red;
    padding: 0.5rem;
    max-width: 20rem;
    border-radius: 0.25rem;
    margin-top: 0.5rem;
  }

  .green-bg {
    color: #06d207;
    padding: 0.5rem;
    max-width: 20rem;
    border-radius: 0.25rem;
    margin-top: 0.5rem;
  }

  .content-wrapper input::placeholder {
    font-weight: 400;
  }

 #found-user .btn {
    margin-top: 0.5rem;
 }


  
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {    
    debugger;
    totalUsersCount();
    totalTestsCount();
    showContentWrapper("dashboard");
    getAllUsers();
    getAllTests();
  });

  let btns = document.querySelectorAll('.render-content')
  btns.forEach(btn => btn.addEventListener('click', findParentElement))

  /* Tabulky */
  let testTable = document.querySelector('#test-table');
  let userTable = document.querySelector('#user-table');

  function findParentElement(e) {
    let clickedElement = e.target;
    let clickedElementData = clickedElement.closest('.render-content').dataset.render;
    hideAllContentWrappers();
    showContentWrapper(clickedElementData);
  }

  async function getUserByEmail() {
    const email = document.querySelector('.searchbar input').value;

    if (email === '') {
      let tableBody = userTable.querySelector('tbody');
      tableBody.innerHTML = "";
      document.querySelector('#load-more-users').style.display = 'inline';
      usersPosition = 0;
      foundUserElement.innerHTML = '';
      getAllUsers();
      return;
    }
    // Vytvořte objekt JSON
    const data = {
      email
    };
    try {
      const res = await fetch('/users/email', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const user = await res.json();
        console.log(user)
        if (user.length === 0) {
          console.log('yes')
          foundUserElement.innerHTML = '<div class="red-bg">Uživatel nenalezen </div>';
        } else {
          let tableBody = userTable.querySelector('tbody');
          tableBody.innerHTML = "";
          document.querySelector('#load-more-users').style.display = 'none';
          foundUserElement.innerHTML = `<div class="green-bg">Uživatel nalezen </div>`;
          fillTable(user, userTable);
        }

      }
    }
    catch (err) {
      console.log(err);
    }
  }

  const count = 10;
  let position = 0;
  async function getAllTests() {
    debugger;
    try {
      const res = await fetch(`/tests/all?count=${count}&position=${position}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const tests = await res.json();
        console.log(tests);
        if (tests.tests.length === 0) {
          document.querySelector('#load-more-tests').style.display = 'none'
        }
        fillTestTable(tests.tests, testTable);
        position = position + count;
        
      }
    }
    catch (err) {
      console.log(err);
    }
  }

  function loadMoreTests() {
    getAllTests();
  }

  let usersCount = 10;
  let usersPosition = 0;

  async function getAllUsers() {
    try {
      const res = await fetch(`/users/all?count=${usersCount}&position=${usersPosition}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const users = await res.json();
        console.log(users);
        if (users.users.length === 0) {
          document.querySelector('#load-more-users').style.display = 'none'
        }
        fillTable(users.users, userTable);
        usersPosition = usersPosition + usersCount;        
      }
    }
    catch (err) {
      console.log(err);
    }
  }

  let foundUserElement = document.querySelector('#found-user')

  /* Stránky které se budou rendrovat */
  let contentWrappers = document.querySelectorAll('.content-wrapper')

  function hideAllContentWrappers() {
    contentWrappers.forEach(contentWrapper => contentWrapper.style.display = 'none')
  }

  // argument contentWrapper bude z pole ["users", "tests", "map", "library", "admin"] 
  function showContentWrapper(contentWrapper) {    
    for (const element of contentWrappers) {
      if (element.classList.contains(contentWrapper)) {
        element.style.display = 'block';
        break;
      }
    }
  }

  function fillTestTable(data, table) {
    let tableBody = table.querySelector('tbody');

    for (let i = 0; i < data.length; i++) {
      addTestRow(data[i], tableBody);
    }
  }

  function addTestRow(data, tableBody) {
    const row = document.createElement('tr');
    row.appendChild(document.createElement('td')).textContent = data.teacherRef.email;
    row.appendChild(document.createElement('td')).textContent = data.title;
    const button = document.createElement('button');
    button.textContent = 'Smazat';
    button.value = data._id;
    button.setAttribute('onclick', 'deleteTest(this)');
    row.appendChild(document.createElement('td')).appendChild(button);

    // Přidejte řádek do těla tabulky
    tableBody.appendChild(row);
  }

  function fillTable(data, table) {
    let tableBody = table.querySelector('tbody');
    //tableBody.innerHTML = "";

    for (let i = 0; i < data.length; i++) {
      addRow(data[i], tableBody);
    }
  }

  function noData() {
    let table = document.querySelector('table');
    table.style.display = 'none';
  }

  function addRow(data, tableBody) {
    const row = document.createElement('tr');
    row.appendChild(document.createElement('td')).textContent = data.email;
    row.appendChild(document.createElement('td')).textContent = data.isAdmin ? "Admin" : "Uživatel";
    if (!data.isAdmin) {
      const button = document.createElement('button');
      button.textContent = 'Smazat';
      button.value = data._id;
      button.setAttribute('onclick', 'deleteUser(this)');
      row.appendChild(document.createElement('td')).appendChild(button);
    }
   
    // Přidejte řádek do těla tabulky
    tableBody.appendChild(row);
  }

  async function deleteUser(userId) {
    try {
      const res = await fetch(`/users/${userId.value}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const rowElement = userId.closest('tr');
        if (rowElement) {
          rowElement.remove();
        }
      }
    }
    catch (err) {
      console.log(err);
    }
  }

  async function deleteTest(testId) {
    try {
      const res = await fetch(`/tests/${testId.value}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const rowElement = testId.closest('tr');
        if (rowElement) {
          rowElement.remove();
        }
      }
    }
    catch (err) {
      console.log(err);
    }
  }

  async function totalUsersCount() {
    try {
      const res = await fetch('/users/count', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const data = await res.json(); 
        let totalUsersElem = document.querySelector('#stats-total-users');
        totalUsersElem.textContent = data.userCount;
      }
    }
    catch (err) {
      console.log(err);
    }
  }

  async function totalTestsCount() {
    try {
      const res = await fetch('/tests/count', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      if (res) {
        const data = await res.json();
        let totalTestsElem = document.querySelector('#stats-total-tests');
        totalTestsElem.textContent = data.testCount;
      }
    }
    catch (err) {
      console.log(err);
    }
  }  
</script>