<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
    />
    <link rel="stylesheet" href="/global.css">
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
  </head>
  <body>
    <div class="layout">
      <%- include('partials/navbar'); %>
      <div class="main">
      <div class="result-wrapper">
        <% if (user) { %>
          <div class="go-back-wrapper">
            <a href="/tests/<%= data.result.testRef %>/results" class="material-symbols-outlined gray80">chevron_left</a>
            <span class="fs06">Zpět</span>
          </div>
          <% }  %>
        <div class="tabs-navigation">
          <label for="result-tab-btn">
            <input type="radio" id="result-tab-btn" name="tabs-navigation" checked>
            <span>Výsledek</span>
          </label>
          <label for="answers-tab-btn">
            <input type="radio" id="answers-tab-btn" name="tabs-navigation">
            <span>Odpovědi</span>
          </label>
        </div>
        <div class="tabs">
          <div id="result-tab">
            <div class="overlay-result">
              <h2><%= data.result.firstName %> <%= data.result.lastName %> </h2>
              <div class="result-info-wrap">
                <div class="gray-text">
                  <span>Známka: </span>
                  <span id="result-mark"><%= data.result.mark %></span>
                </div>
                <div class="gray-text">
                  <span>Body: </span>
                  <span id="result-total-points"><%= data.result.points %>/</span>
                </div>
              </div>
              <% if (isAuthor) { %>
                <button value="<%= data.result._id %>" class="m-top1 btn btn--icon-before btn--gray btn--icon-before-edit" id="editResult">Upravit výsledek</button>
              <% } %>

              <dialog id="editResultDialog">
                <form method="dialog">
                  <div>
                    <label for="new-result-mark">Známka</label>
                    <input class="input-form" id="new-result-mark" type="number" min="1" max="5">
                  </div>
                  <div class="m-top1">
                    <label for="new-result-points">Body</label>
                    <input class="input-form" id="new-result-points" type="number" min="0">
                  </div>                 
                  <button class="btn btn--gray material-symbols-outlined" id="close">close</button>
                  <button class="m-top1 btn btn--icon-before btn--icon-before-save btn--gray" id="save-changes">Uložit</button>
                </form>
              </dialog>
            </div>
          </div>
          <div id="answers-tab">
            <div class="questions-wrap">
              <% for (let i=0; i < data.test.questions.length; i++) { %> <!--  test.test.questions.length -->
                <div class="<%= i === 0 ? 'question active' : 'question' %>">
                  <%=i+1%>
                </div>
                <% } %>
            </div>
            <% for (let i=0; i < data.test.questions.length; i++) { %>
              <div data-points="<%=data.test.questions[i].points%>" class="<%= i === 0 ? 'question-content-active question-data' : 'question-content question-data' %>">
                <div class="options">
                  <% for (let j=0; j < data.test.questions[i].answers.length; j++) { %>
                    <button class="btn btn--answer" <% if (data.test.questions[i].answers[j].isCorrect === true) { %>
                      data-isCorrect="1" <% } %>><%=data.test.questions[i].answers[j].term%></button>
                    <% } %>
                </div>
                <div class="canvas-wrap">
                  <canvas id="canvas<%= i %>"></canvas>
                </div>
              </div>
              <% } %>
          </div>
        </div>
      </div>
    </div>
  </body>

<style>
  .result-wrapper {
    box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;
    max-width: 70rem;
    background-color: white;
    padding: 1rem;
    width: 100%;
    margin: 0 auto;
  }

  .tabs-navigation {
    margin: 1rem 0;
  }

  .tabs-navigation input {
    display:none;
  }

  .tabs-navigation label {
    cursor:pointer;
    text-transform: uppercase;
    font-size: 1.5rem;
  }

  .tabs-navigation span {
    padding:0.5rem 1rem;
    border-radius: 0.5rem;
    display:inline-block;
    color: #4a4a4a;
    font-weight: 500;
  }

  .tabs-navigation input:checked + span, .tabs-navigation input:hover + span  {
    background-color: rgb(243, 243, 243); 
  }

  .tabs-navigation input:hover + span  {
    background-color: rgb(243, 243, 243); 
  }

  #answers-tab {
    display:none;
  }

  /* result */

  .overlay-result {
    padding:0 1rem;
    border-radius: 0.5rem;
    justify-items: center;
  }

  .overlay-result a {
    background-color: #a2efe0;
    border-radius: 0.5rem;
    padding: 0.5rem;
    margin-top: 0.5rem;
    color: #1d9d4b;
    text-transform: uppercase;
    font-size: 0.9rem;
    font-weight: 500;
    width: 15rem;
    height: 3.5rem;
    text-decoration: none;
    display: grid;
    place-items: center;
  }

  .overlay-result a:hover {
    background-color: #8dedda;
  }

  .overlay-result h2 {
    color: #747474;
    margin-bottom: 1rem;
    font-size: 2.75rem;
  }

  .result-info-wrap {
    border-radius: 0.5rem;
    background-color: #f3f3f3;
    padding:2rem 4rem;
  }

  .overlay-result .gray-text {
    text-transform: uppercase;
    color: #686867;
    font-weight: 600;
    font-size: 2rem;
  }
  #result-mark, #result-total-points {
    color: #5bd7ad;
    position: relative;
    font-size: 3rem;
    top: 0.25rem;
    left: 0.5rem;
  }

  /* odpovedi */
  
  .questions-wrap {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(2.5rem,1fr));
    gap: 1rem;
    padding: 1rem;
    background-color: rgb(248, 248, 248);
    border-radius: 0.5rem;
  }

  .question {
    background-color: rgb(236, 236, 236);
    width: 3rem;
    height: 3rem;
    border-radius: 0.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: pointer;
}

  .active, .question:hover {
    outline: 3px solid #46b3d1;
  }
  
  .done {
    background-color: #51cdd38f;
  }

  .question-content {
    display: none;
  }

  .question-content-active {
    display: block;
    overflow-x: hidden;
  }
  
  .options {
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-auto-rows: 1fr;
    margin: 1rem 0;
}

  #answers-tab .btn {
    background: rgb(239, 239, 239);
    border-radius: 0.25rem;
    padding: 1rem 0.1rem;
    min-height: 4rem;
    width: auto;
    max-width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.9rem;
    user-select: none;
    word-break: break-all;
    outline: none;
    border: none;
  }

  #answers-tab .btn.red {
    background: rgb(255 169 169);
  }
  
  #answers-tab .btn.green {
    background: rgb(172 245 164);
  }

  .canvas-wrap {
    margin: 1.5rem auto 0 auto;
    display: flex;
    justify-content: center;
    max-width: 100%;
    overflow-x: auto;
  }

  .canvas-wrap {
      width: 100%;
      position: relative;
  }

  .canvas-container {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;
    margin: 0.5rem 0 1rem;
  }

  .upper-canvas, .lower-canvas, .canvas-container {
      pointer-events: none;
  }

  /* DIALOG */

  #editDialogResult {
    position: relative;
  }

  :modal {
    background-color: rgb(255, 255, 255);
    border-radius: 0.25rem;
    border:none;
    padding:2.5rem;
    margin: auto;
    box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;
  }

  #save-changes {

  }
  #close {
    position: absolute;
    right:1rem;
    top:1rem;
    border-radius: 9999px;
    border:none;
    cursor: pointer;
    padding: 0.5rem;
    font-size: 1rem;
  }




</style>

<script>
  let resultTab = document.querySelector('#result-tab');
  let answersTab = document.querySelector('#answers-tab');

  let tabs = document.getElementsByName('tabs-navigation')
  tabs.forEach(el => el.addEventListener('change', changeTab));

  function changeTab(e) {
    if (e.target.id === 'answers-tab-btn') {
      resultTab.style.display = 'none';
      answersTab.style.display = 'block';
    } else {
      resultTab.style.display = 'block';
      answersTab.style.display = 'none';
    }
  }

  /* inicializace canvasu a otázek */
  function selectQuestion(e) {
    console.log('yes')
    document.querySelector('.question.active').classList.remove('active')
    e.target.classList.add('active')
    document.querySelector('.question-content-active').classList.replace('question-content-active', 'question-content')
    let questionNumToChange = Number(e.target.innerText);
    let test = document.querySelectorAll('.question-content')[questionNumToChange - 1];
    test.classList.replace('question-content', 'question-content-active')
   }

  function initQuestions() {
    console.log('draw')
    let allQuestion = document.querySelectorAll('.question')
    console.log('all q ', allQuestion)
    allQuestion.forEach(el => el.addEventListener('click', selectQuestion))
    //let answerBtns = document.querySelectorAll('.btn.btn--answer').forEach(el => el.addEventListener('click', markAsChecked));
  }

  /* nahrátí zodpovězených otázek */
  let answerIndexes = JSON.parse('<%= JSON.stringify(data.result.answersIndexes) %>');
  let allOptions = document.querySelectorAll('.options');
  let userIndexes;
  let questionIcons = document.querySelectorAll('.question');

  function initUserAnswers() {
    debugger;
    userIndexes = findWhereDataIsCorrect(); 
    let len = answerIndexes.length;
    
    for (let i = 0; i < len; i++) {
      if (answerIndexes[i] == userIndexes[i]) {
        colorGreen(allOptions[i].children[userIndexes[i]]);
        questionIcons[i].style.background = 'rgb(172 245 164)';
        continue;
      }
      if (answerIndexes[i] === null) {
        colorRed(allOptions[i].children[userIndexes[i]]);
        questionIcons[i].style.background = 'rgb(255 169 169)';
        continue;
      }
      colorGreen(allOptions[i].children[userIndexes[i]]);
      colorRed(allOptions[i].children[answerIndexes[i]]);
      questionIcons[i].style.background = 'rgb(255 169 169)';
    }
  }

  function findWhereDataIsCorrect() {
    let indexes = []
    for (let i = 0; i < allOptions.length; i++) {
      for (let j = 0; j < allOptions[i].children.length; j++) {
        if (allOptions[i].children[j].dataset.iscorrect == 1) {
          indexes[i] = j;
        }
      }
    }
    return indexes;
  }

  function colorGreen(elem) {
    elem.classList.add('green');
  }

  function colorRed(elem) {
    elem.classList.add('red');
  }

  var canvases = []
  var shapes = []
  var canvasesTest = []

  function loadQuestionMap(maps, mapId) {
    maps.forEach(map => {
      console.log('map.mapId', map.mapId);
      console.log('mapId ', mapId)
      if (map.mapId == mapId) {
        console.log('heeeeeeeeeeeeeere', map.data);
        return map.data;
      }
    })
  }

  // secte vsechny body z otazek, ziskam tim celkovy pocet bodu z testu
  function getPointsFromQuestions() {
    let pointsValues = [];
    let points = document.querySelectorAll('.question-data');
    let sumPoints = 0;
    for (let i = 0; i < points.length; i++) {
      pointsValues[i] = Number(points[i].dataset.points);
      sumPoints = sumPoints + pointsValues[i];
    }
    return sumPoints;
  }

  function initPoints() {
    let resultPoints = document.querySelector('#result-total-points');
    console.log('INIT POINTS');
    
    let totalPoints = getPointsFromQuestions();
    resultPoints.textContent += totalPoints;
  }

  let testId = '<%= data.result.testRef %>';

  function drawCanvases() {
    console.log('Draw canvnases')

    fetch(`/tests/${testId}`, {
        method: 'GET',
        credentials: 'include'
      }).then(response => response.json())
        .then(data=> {
          let questions = data.test.questions;
          let maps = data.test.maps;
          boundaries = data.test.marksBoundaries;
          console.log('questions: ', questions);
          console.log('maps: ', maps);
          console.log('boundaries ', boundaries);
          console.log('testRef ', data.test._id);
          
          for (let i = 0; i < questions.length; i++) {
            canvases.push(document.querySelector(`#canvas${i}`))
          }

          for (let i = 0; i < questions.length; i++) {
            canvasesTest.push(new fabric.Canvas(canvases[i]));
            let mapData = loadQuestionMap(maps, questions[i].map);
            console.log('mapData ', mapData);

            let mapIndex = maps.findIndex( map => map.mapId == questions[i].map)

            fabric.Image.fromURL(maps[mapIndex].data, function (img) {
              console.log('width of image: ', img.getScaledWidth(), img.getScaledHeight())
              img.scaleToWidth(750, true);
              canvasesTest[i].setDimensions({ width: 750, height: img.getScaledHeight() })
              canvasesTest[i].add(img);
              console.log(questions[i].shapes);
              console.log('heere')
              shapes[i] = JSON.stringify(questions[i].shapes);
              console.log('shapes: ',  shapes[i] )
              canvasesTest[i].loadFromJSON(questions[i].shapes);
              canvasesTest[i].sendToBack(img);
              console.log('objs: ',  canvasesTest[i].getObjects());
            });
        } 
      })} 
  
      window.addEventListener("load", (event) => {
        console.log("page is fully loaded");
        initQuestions();
        initUserAnswers(); 
        drawCanvases();
        initPoints();
      });


      /* EDIT DIALOG */
      const editResult = document.getElementById('editResult');
      const favDialog = document.getElementById('editResultDialog');
      const closeDialogBtn = document.querySelector('#close');
      const saveDialogBtn = document.querySelector('#save-changes');

      editResult.addEventListener('click', () => {
        editResultDialog.showModal();
      });

      closeDialogBtn.addEventListener('click', () => {
        editResultDialog.close();
      })

      saveDialogBtn.addEventListener('click', () => {
        updateResult(updateResultBtn.value);
        editResultDialog.close();
      })

      let resultMarkElem = document.querySelector('#result-mark');
      let resultTotalPointsElem = document.querySelector('#result-total-points');
      let newMarkValueInput = document.querySelector('#new-result-mark');
      let newPointsValueInput = document.querySelector('#new-result-points');
      let updateResultBtn = document.querySelector('#editResult');

      function getTotalPoints() {
        let val = resultTotalPointsElem.innerText;
        let splitted = val.split('/')
        return splitted[1];

      }

      async function updateResult(resultId) {
        debugger;
        try {
          let newMarkValue = newMarkValueInput.value;
          let newPointsValue = newPointsValueInput.value;

          let fetchUrl = '/results/' + resultId;
          const res = await fetch(fetchUrl, {
            method: 'PUT', 
            body: JSON.stringify( { newMarkValue, newPointsValue } ),
            headers: {'Content-Type': 'application/json'},
            credentials: 'include'
          })
          if (res) {
            console.log('yeeeeeeeeeee')
            resultMarkElem.innerText = newMarkValue;
            resultTotalPointsElem.innerText = newPointsValue + '/' + getTotalPoints();
          }
        }
        catch (err) {
          console.log(err)
        }
      }

</script>
