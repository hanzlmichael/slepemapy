<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
  </head>
  <body>
    <div class="layout">
      <div class="overlay-wrapper">
        <div class="title-wrap">
          <h2><%=test.title%></h2>
          <div>Časový limit: <%=test.timeLimit%> minut</div>
        </div>
        <div class="info">
          <label for="firstName">Jméno</label>
          <input type="text" id="firstName" placeholder="" required="" />
          <label for="lastName">Příjmení</label>
          <input type="text" id="lastName" placeholder="" required="" />
          <label for="email">Emailová adresa</label>
          <input type="text" id="email" placeholder="" required="" />
          <button class="btn" id="startTestBtn">spustit test</button>
        </div>
      </div>
      <div class="overlay-test">
        <div class="title-wrap">
          <h2>Test: <%=test.title%></h2>
          <% if (test.timeLimit) { %>
            <div id="countdown" data-timelimit="<%=test.timeLimit%>"></div>
          <% } %>             
        </div>
        <div class="questions-wrap">
          <% for (let i=0; i < test.questions.length; i++) { %> <!--  test.test.questions.length -->
            <div class="<%= i === 0 ? 'question active' : 'question' %>">
              <%=i+1%>
            </div>
            <% } %>
        </div> 
        <% for (let i=0; i < test.questions.length; i++) { %>
          <div data-points="<%=test.questions[i].points%>" class="<%= i === 0 ? 'question-content-active question-data' : 'question-content question-data' %>">
            <div class="options">
              <% for (let j=0; j < test.questions[i].answers.length; j++) { %>
                <button class="btn btn--answer" <% if (test.questions[i].answers[j].isCorrect) { %>
                  data-isCorrect="true"
                <% } %>><%=test.questions[i].answers[j].term%></button>
                <% } %>
            </div>
            <div class="canvas-wrap">
              <canvas id="canvas<%= i %>"></canvas>
            </div>
          </div>
          <% } %>
          <button class="btn btn--icon--before" id="evaluateTest">
            <svg xmlns="http://www.w3.org/2000/svg" height="48" viewBox="0 96 960 960" width="48"><path d="M400 738 247 585l42-42 111 111 271-271 42 42-313 313Z"/></svg>
            vyhodnotit test
          </button>
      </div>
      <div class="overlay-result">
        <h2>Váš výsledek:</h2>
        <img src="https://imageupload.io/ib/06LSYaiwhfumcYR_1696850581.png" alt="">
        <div>
          <div class="gray-text">
            <span>Známka: </span>
            <span id="result-mark"></span>
          </div>
          <div class="gray-text">
            <span>Body: </span>
            <span id="result-total-points"></span>
          </div>
        </div>
        
        <div>
          <a id="redirectToResult" href="">zobrazit výsledek</a>
        </div>
      </div>
    </div>
  </body>
</html>

<style>
  * {
    font-family: "Poppins", sans-serif;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body,
  html,
  .layout {
    height: 100%;
  }

  .layout {
    background-color: rgb(235, 235, 235);
    display: grid;
    place-items: center;
    overflow-y: auto;
  }

  /* Overlay informace o studentovi */
  .overlay-wrapper {
    padding: 1rem;
    background: white;
    max-width: 25rem;
    box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;
    border-radius: 0.5rem;
  }

  .overlay-wrapper .info {
    padding: 1rem 0 0 0;
    display: flex;
    flex-direction: column;
  }

  .overlay-wrapper .title-wrap div {
    font-weight: 500;
    color: #29c328;
    padding-bottom: 0.5rem;
    padding-top: 0.5rem;
    border-bottom: 2px solid rgb(225, 222, 225);
  }
  .overlay-wrapper h2 {
    color: #5e5e5e;
  }

  .overlay-wrapper label {
    color: #787878;
    font-weight: 500;
  }

  .overlay-wrapper input {
    display: block;
    width: 100%;
    background-color: rgb(235, 235, 235);
    border: none;
    outline: none;
    height: 3rem;
    font-size: 1.25rem;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    margin-bottom: 0.35rem;
  }

  .overlay-wrapper button {
    background: rgb(36 124 237);
    margin-top: 1.25rem;
    height: 3rem;
    font-weight: 500;
    font-size: 1rem;
    text-transform: uppercase;
    color: #ffffff;
    letter-spacing: 0.1rem;
    border-radius: 0.5rem;
  }

  .overlay-wrapper button:hover {
    background: rgb(26, 108, 215);
    cursor: pointer;
  }

  .overlay-wrapper button {
    outline: none;
    border: none;
  }

  .missing-input {
    color: #c90303;
    font-size: small;
  }

  /* Spusteny test */
  .overlay-test {
    height: 100%;
    width: 100%;
    max-width: 70rem;
    padding: 0 1rem 1rem 1rem;
    background: rgb(255 255 255);
    display: none;
    grid-template-rows: auto auto 1fr;
  }

  .overlay-test .title-wrap {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 2px solid #dededed9;
    margin-bottom: 1rem;
  }

  .overlay-test h2 {
    padding: 1.5rem 0.5rem 1rem 0.5rem;
    font-size: 2rem;
  }

  #countdown {
    background-color: rgb(245,245,245);
    width: 5.75rem;
    padding: 0.25rem 1.25rem;
    border-radius: 0.5rem;
    font-size: 1.25rem;
    font-weight: 500;
  }

  .questions-wrap {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(2.5rem,1fr));
    gap: 1rem;
    padding: 1rem;
    background-color: rgb(248, 248, 248);
    border-radius: 0.5rem;
  }

  .question {
    background-color: rgb(236, 236, 236);
    width: 3rem;
    height: 3rem;
    border-radius: 0.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: pointer;
}

  .active, .question:hover {
    outline: 2px solid #ff8318;
  }
  
  .done {
    background-color: #51cdd38f;
  }

  .question-content {
    display: none;
  }

  .question-content-active {
    display: block;
    overflow-x: hidden;
  }

  .options {
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-auto-rows: 1fr;
    margin: 1rem 0;
}

  .options .btn--checked {
    background: #51cdd38f;
  }

  .btn:hover {
    background: #51cdd38f;
  }

  .btn {
    background: rgb(239, 239, 239);
    border-radius: 0.25rem;
    padding: 1rem 0.1rem;
    min-height: 4rem;
    width: auto;
    max-width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.9rem;
    user-select: none;
    cursor: pointer;
    word-break: break-all;
    outline: none;
    border: none;
  }

  .canvas-wrap {
    margin: 1.5rem auto 0 auto;
    display: flex;
    justify-content: center;
    max-width: 100%;
    overflow-x: auto;
  }
  canvas {
    border-radius: 0.5rem;
  }

  .canvas-wrap {
      width: 100%;
      position: relative;
  }

  .canvas-container {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;
    margin: 0.5rem 0 1rem;
  }

  .upper-canvas, .lower-canvas, .canvas-container {
      pointer-events: none;
      border-radius: 0.5rem;
  }

  #evaluateTest {
    margin: 1rem auto 1rem auto;
    max-width: 30rem;
    padding: 0 2rem 0 1rem;
  } 

  .overlay-result {
    display:none;
    padding:1rem;
    background:white;
    max-width: 25rem;
    width: 20rem;
    box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;
    border-radius: 0.5rem;
    justify-items: center;
  }

  .overlay-result img {
    width: 100%;
    max-width: 10rem;
    justify-self: center;
    margin-bottom: 1rem;
  }
  .overlay-result a {
    background-color: #a2efe0;
    border-radius: 0.5rem;
    padding: 0.5rem;
    margin-top: 0.5rem;
    color: #1d9d4b;
    text-transform: uppercase;
    font-size: 0.9rem;
    font-weight: 500;
    width: 15rem;
    height: 3.5rem;
    text-decoration: none;
    display: grid;
    place-items: center;
  }

  .overlay-result a:hover {
    background-color: #8dedda;
  }

  .overlay-result h2 {
    color: #747474;
    margin-bottom: 1rem;
  }

  .overlay-result .gray-text {
    text-transform: uppercase;
    color: #686867;
    font-weight: 600;
  }
  #result-mark, #result-total-points {
    color: #5bd7ad;
    position: relative;
    font-size: 2rem;
    top: 0.25rem;
    left: 0.5rem;
  }

</style>

<script>


  // start testu
  let startTestBtn = document.querySelector("#startTestBtn");
  startTestBtn.addEventListener("click", startTest);

  function startTest() {
    const firstName = document.querySelector(".info #firstName");
    const lastName = document.querySelector(".info #lastName");
    const email = document.querySelector(".info #email");
    const firstNameLabel = document.querySelector('label[for="firstName"]');
    const lastNameLabel = document.querySelector('label[for="lastName"]');
    const emailLabel = document.querySelector('label[for="email"]');
    let allInputsValid = true;

    if (!firstName.value) {
      firstNameLabel.innerHTML = `Jméno <span class="missing-input">(*povinné pole)</span">`;
      allInputsValid = false;
    } else {
      firstNameLabel.innerHTML = "Jméno";
    }

    if (!lastName.value) {
      lastNameLabel.innerHTML = `Příjmení <span class="missing-input">(*povinné pole)</span">`;
      allInputsValid = false;
    } else {
      lastNameLabel.innerHTML = "Příjmení";
    }

    if (!email.value) {
      emailLabel.innerHTML = `Emailová adresa <span class="missing-input">(*povinné pole)</span">`;
      allInputsValid = false;
    } else {
      emailLabel.innerHTML = "Emailová adresa";
    }
    if (allInputsValid) {
      initTime(Number(document.querySelector('#countdown').getAttribute('data-timelimit')));
      startTime();
      document.querySelector(".overlay-wrapper").style.display = "none";
      document.querySelector(".overlay-test").style.display = "grid";
    }
  }

  let inSeconds = Number(document.querySelector('#countdown').getAttribute('data-timelimit')) * 60;
  let timeId = document.querySelector('#countdown');

  function initTime(x) {
    let timeString = "";
    timeString = setPadding(x) 
    countdown.innerHTML = timeString
  }
  
  function setPadding(x) {
    if (x > 5) {
      return `${x}:00`;
    } else {
      return `0${x}:00`;
    }
  }

  function startTime() {
    let interval = setInterval(function() {
      let minutes = Math.floor(inSeconds/60);
      let seconds = inSeconds % 60;
      timeId.innerHTML = `${ minutes < 10 ? "0" + minutes : minutes}:${inSeconds%60 < 10 ? "0" + seconds : seconds}`;
      inSeconds = inSeconds - 1;
      if (inSeconds === -1) {
        //evaluateTest(); 
        clearInterval(interval);
      }
    }, 1000); 
  }

  let evaluateTestBtn = document.querySelector('#evaluateTest');
  evaluateTestBtn.addEventListener('click', evaluateTest);

  function evaluateTest() {
    debugger;
    document.querySelector('.overlay-test').style.display = "none";
    document.querySelector('.overlay-result').style.display = "grid";

    // zjistit zodpovezene otazky a porovnat se spravnymi 

    // vykreslit celkovy pocet bodu z testu
    setTotalPoints();

    saveResultToDb(); 
    
  }

  let answers = document.querySelectorAll('.question-content .btn--checked')
  let points = document.querySelectorAll('.question');
  let pointsValues = [];
  let boundaries = [];

  function getStudentAnswers() {
    return document.querySelectorAll('.options');
  }

  function getAchievedPoints() {
    debugger;
    let answers = getStudentAnswers();
    getPointsFromQuestions();
    let achievedPoints = 0;
    for (let i = 0; i < answers.length; i++) {
      if (answers[i].querySelector('.btn--checked')) {
        let checkedAnswer = answers[i].querySelector('.btn--checked');
        if (checkedAnswer.dataset.iscorrect == "true") {
          achievedPoints += pointsValues[i];
        }
      }
    }
    return achievedPoints;
  }

  function getPointsFromQuestions() {
    let points = document.querySelectorAll('.question-data');
    let sumPoints = 0;
    for (let i = 0; i < points.length; i++) {
      pointsValues[i] = Number(points[i].dataset.points);
      sumPoints = sumPoints + pointsValues[i];
    }
    return sumPoints;
  }

  function setTotalPoints() {
    debugger;
    let totalPointsElement = document.querySelector('#result-total-points');
    let totalPoints = getPointsFromQuestions();
    let achievedPoints = getAchievedPoints();
    totalPointsElement.innerText = `${achievedPoints}/${totalPoints}`;
    setMark();
  }

  function setMark() {
    let resultMarkElement = document.querySelector('#result-mark');
    resultMarkElement.innerText = calculateMark(getAchievedPoints(), boundaries);
  }


  // Vypocita vyslednou znamku
  function calculateMark(points, boundaries) {
    let boundariesCount = boundaries.length - 1;
    let mark = 1;
    for (let i = 1; i < boundariesCount; i+=2) {
      if (points >= boundaries[i]) {
        return mark;
      } else {
        mark++;
        if (mark == 5) {
          return mark;
        }
      }
    }
  }

  /* Question bar */

  function selectQuestion(e) {
    debugger;
    console.log('yes')
    document.querySelector('.question.active').classList.remove('active')
    e.target.classList.add('active')
    document.querySelector('.question-content-active').classList.replace('question-content-active', 'question-content')
    let questionNumToChange = Number(e.target.innerText);
    let test = document.querySelectorAll('.question-content')[questionNumToChange - 1];
    test.classList.replace('question-content', 'question-content-active')
   }

   function markAsChecked(e) {
    let parent = e.target.closest('.options');
    if (parent.querySelector('.btn--checked') == e.target) {
      e.target.classList.toggle('btn--checked');
      markQuestionIconAsChecked()
      return;
    }
    if (parent.querySelector('.btn--checked')) {
      parent.querySelector('.btn--checked').classList.toggle('btn--checked')
      markQuestionIconAsChecked()
    }
    markQuestionIconAsChecked()
    e.target.classList.toggle('btn--checked');
  }
  function markQuestionIconAsChecked() {
    document.querySelector('.question.active').classList.toggle('done');
  }

  function initQuestions() {
    console.log('draw')
    debugger;
    let allQuestion = document.querySelectorAll('.question')
    console.log('all q ', allQuestion)
    allQuestion.forEach(el => el.addEventListener('click', selectQuestion))
    let answerBtns = document.querySelectorAll('.btn.btn--answer').forEach(el => el.addEventListener('click', markAsChecked));
  }

  var canvases = []
  var shapes = []
  var canvasesTest = []

  function loadQuestionMap(maps, mapId) {
    maps.forEach(map => {
      console.log('map.mapId', map.mapId);
      console.log('mapId ', mapId)
      if (map.mapId == mapId) {
        console.log('heeeeeeeeeeeeeere', map.data);
        return map.data;
      }
    })
  }
  

  function drawCanvases() {
    console.log('Draw canvnases')
    debugger;
    let url = window.location.href;
    let urlArray = url.split('/');
    const testId = urlArray[urlArray.length - 2];
    fetch(`/tests/${testId}`, {
        method: 'GET',
        credentials: 'include'
      }).then(response => response.json())
        .then(data=> {
          debugger;
          let questions = data.test.questions;
          let maps = data.test.maps;
          boundaries = data.test.marksBoundaries;
          console.log('questions: ', questions);
          console.log('maps: ', maps);
          console.log('boundaries ', boundaries);
          console.log('testRef ', data.test._id);
          
          for (let i = 0; i < questions.length; i++) {
            canvases.push(document.querySelector(`#canvas${i}`))
          }

          for (let i = 0; i < questions.length; i++) {
            canvasesTest.push(new fabric.Canvas(canvases[i]));
            let mapData = loadQuestionMap(maps, questions[i].map);
            console.log('mapData ', mapData);

            let mapIndex = maps.findIndex( map => map.mapId == questions[i].map)

            fabric.Image.fromURL(maps[mapIndex].data, function (img) {
              console.log('width of image: ', img.getScaledWidth(), img.getScaledHeight())
              img.scaleToWidth(750, true);
              canvasesTest[i].setDimensions({ width: 750, height: img.getScaledHeight() })
              canvasesTest[i].add(img);
              console.log(questions[i].shapes);
              console.log('heere')
              shapes[i] = JSON.stringify(questions[i].shapes);
              console.log('shapes: ',  shapes[i] )
              canvasesTest[i].loadFromJSON(questions[i].shapes);
              canvasesTest[i].sendToBack(img);
              console.log('objs: ',  canvasesTest[i].getObjects());
            });
        } 
      })} 
  
      window.addEventListener("load", (event) => {
        debugger;
        console.log("page is fully loaded");
        initQuestions();
        drawCanvases();
      });



  /* Ulozit Result do databaze */
  async function saveResultToDb() {
    debugger;
    try {

      let testRef = getTestRef();
      let firstName = getFirstName();
      let lastName = getLastName();
      let email = getEmail();
      let answersIndexes = getAnswersIndexes();
      let mark = getMark();
      let points = getPoints();

      const res = await fetch(`/results/${testRef}`, {
        method: 'POST', 
        body: JSON.stringify( { testRef, firstName, lastName, email, answersIndexes, mark, points } ),
        headers: {'Content-Type': 'application/json'},
        credentials: 'include'
      })
      if (res.ok) {
        console.log('res : ', res)
        
        const resultData = await res.json();
        const resultId = resultData._id; // Získání _id z odpovědi
        console.log('Nově vytvořený ObjectId:', resultId);
        let redirectElement = document.querySelector('#redirectToResult');
        redirectElement.setAttribute('href', `/results/${resultId}`);

      } else {
        console.log('Chyba při ukládání výsledku');
      }
    }
    catch (err) {
      console.log(err)
    }
  }

  function getTestRef() {
    let url = window.location.href;
    let splittedUrl = url.split('/');
    return splittedUrl[splittedUrl.length - 2];
  }

  function getFirstName() {
    return document.querySelector('#firstName').value;
  } 

  function getLastName() {
    return document.querySelector('#lastName').value;
  }

  function getEmail() {
    return document.querySelector('#email').value;
  }

  function getAnswersIndexes() {
    debugger;
    let options = document.querySelectorAll('.options');
    let answerIndexes = [];
    for (let i = 0; i < options.length; i++) {
      for (let j = 0; j < options[i].children.length; j++) {
        if (options[i].children[j].classList.contains('btn--checked')) {
          answerIndexes[i] = j;
          break;
        } else {
          answerIndexes[i] = null;
        }
      }
    }
    return answerIndexes;
  }

  function getMark() {
    return document.querySelector('#result-mark').innerText;
  }

  function getPoints() {
    let points = document.querySelector('#result-total-points').innerText;
    points.split('/');
    return points.split('/')[0];
  }


</script>
