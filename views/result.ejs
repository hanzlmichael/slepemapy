<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
    />
    <link rel="stylesheet" href="/global.css">
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
  </head>
  <body>
    <div class="layout">
      <%- include('partials/navbar'); %>
      <div class="result-wrapper">
        <div class="tabs-navigation">
          <label for="result-tab-btn">
            <input type="radio" id="result-tab-btn" name="tabs-navigation" checked>
            <span>Výsledek</span>
          </label>
          <label for="answers-tab-btn">
            <input type="radio" id="answers-tab-btn" name="tabs-navigation">
            <span>Odpovědi</span>
          </label>
        </div>
        <div class="tabs">
          <div id="result-tab">
            <div class="overlay-result">
              <h2><%= data.result.firstName %> <%= data.result.lastName %> </h2>
              <img src="https://imageupload.io/ib/06LSYaiwhfumcYR_1696850581.png" alt="Test" height="160">
              <div>
                <div class="gray-text">
                  <span>Známka: </span>
                  <span id="result-mark"><%= data.result.mark %></span>
                </div>
                <div class="gray-text">
                  <span>Body: </span>
                  <span id="result-total-points"><%= data.result.points %></span>
                </div>
              </div>
            </div>
          </div>
          <div id="answers-tab">
            <div class="questions-wrap">
              <% for (let i=0; i < data.test.questions.length; i++) { %> <!--  test.test.questions.length -->
                <div class="<%= i === 0 ? 'question active' : 'question' %>">
                  <%=i+1%>
                </div>
                <% } %>
            </div>
            <% for (let i=0; i < data.test.questions.length; i++) { %>
              <div data-points="<%=data.test.questions[i].points%>" class="<%= i === 0 ? 'question-content-active question-data' : 'question-content question-data' %>">
                <div class="options">
                  <% for (let j=0; j < data.test.questions[i].answers.length; j++) { %>
                    <button <% if (data.test.questions[i].answers[j].isCorrect) { %>
                      data-isCorrect="true" class="btn btn--answer green"
                    <% } else { %>
                      class="btn btn--answer"
                    <% } %>><%=data.test.questions[i].answers[j].term%></button>
                    <% } %>
                </div>
                <div class="canvas-wrap">
                  <canvas id="canvas<%= i %>"></canvas>
                </div>
              </div>
              <% } %>
          </div>
        </div>
      </div>
  </body>

<style>
  .result-wrapper {
    box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;
    width: 70rem;
    background-color: white;
    padding: 1rem;
  }

  .tabs-navigation {
    margin-bottom: 1rem;
  }

  .tabs-navigation input {
    display:none;
  }

  .tabs-navigation label {
    cursor:pointer;
    text-transform: uppercase;
    font-size: 1.5rem;
  }

  .tabs-navigation span {
    padding:0.5rem 1rem;
    border-radius: 0.5rem;
    display:inline-block;
    color: #4a4a4a;
    font-weight: 500;
  }

  .tabs-navigation input:checked + span, .tabs-navigation input:hover + span  {
    background-color: rgb(243, 243, 243); 
  }

  .tabs-navigation input:hover + span  {
    background-color: rgb(243, 243, 243); 
  }

  #answers-tab {
    display:none;
  }

  /* result */

  .overlay-result {
    padding:1rem;
    background:white;
    max-width: 25rem;
    width: 20rem;
    box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;
    border-radius: 0.5rem;
    justify-items: center;
  }

  .overlay-result img {
    width: 100%;
    max-width: 10rem;
    justify-self: center;
    margin-bottom: 1rem;
  }
  .overlay-result a {
    background-color: #a2efe0;
    border-radius: 0.5rem;
    padding: 0.5rem;
    margin-top: 0.5rem;
    color: #1d9d4b;
    text-transform: uppercase;
    font-size: 0.9rem;
    font-weight: 500;
    width: 15rem;
    height: 3.5rem;
    text-decoration: none;
    display: grid;
    place-items: center;
  }

  .overlay-result a:hover {
    background-color: #8dedda;
  }

  .overlay-result h2 {
    color: #747474;
    margin-bottom: 1rem;
  }

  .overlay-result .gray-text {
    text-transform: uppercase;
    color: #686867;
    font-weight: 600;
  }
  #result-mark, #result-total-points {
    color: #5bd7ad;
    position: relative;
    font-size: 2rem;
    top: 0.25rem;
    left: 0.5rem;
  }

  /* odpovedi */
  
  .questions-wrap {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(2.5rem,1fr));
    gap: 1rem;
    padding: 1rem;
    background-color: rgb(248, 248, 248);
    border-radius: 0.5rem;
  }

  .question {
    background-color: rgb(236, 236, 236);
    width: 3rem;
    height: 3rem;
    border-radius: 0.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: pointer;
}

  .active, .question:hover {
    outline: 2px solid #ff8318;
  }
  
  .done {
    background-color: #51cdd38f;
  }

  .question-content {
    display: none;
  }

  .question-content-active {
    display: block;
    overflow-x: hidden;
  }

  
  .options {
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-auto-rows: 1fr;
    margin: 1rem 0;
}

  .btn {
    background: rgb(239, 239, 239);
    border-radius: 0.25rem;
    padding: 1rem 0.1rem;
    min-height: 4rem;
    width: auto;
    max-width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.9rem;
    user-select: none;
    word-break: break-all;
    outline: none;
    border: none;
  }

  .btn.red {
    background: rgb(255 169 169);
  }
  
  .btn.green {
    background: rgb(172 245 164);
  }

  .canvas-wrap {
    margin: 1.5rem auto 0 auto;
    display: flex;
    justify-content: center;
    max-width: 100%;
    overflow-x: auto;
  }

  .canvas-wrap {
      width: 100%;
      position: relative;
  }

  .canvas-container {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;
    margin: 0.5rem 0 1rem;
  }

  .upper-canvas, .lower-canvas, .canvas-container {
      pointer-events: none;
  }


</style>

<script>
  let resultTab = document.querySelector('#result-tab');
  let answersTab = document.querySelector('#answers-tab');

  let tabs = document.getElementsByName('tabs-navigation')
  tabs.forEach(el => el.addEventListener('change', changeTab));

  function changeTab(e) {
    if (e.target.id === 'answers-tab-btn') {
      resultTab.style.display = 'none';
      answersTab.style.display = 'block';
    } else {
      resultTab.style.display = 'block';
      answersTab.style.display = 'none';
    }
  }

  /* inicializace canvasu a otázek */
  function selectQuestion(e) {
    debugger;
    console.log('yes')
    document.querySelector('.question.active').classList.remove('active')
    e.target.classList.add('active')
    document.querySelector('.question-content-active').classList.replace('question-content-active', 'question-content')
    let questionNumToChange = Number(e.target.innerText);
    let test = document.querySelectorAll('.question-content')[questionNumToChange - 1];
    test.classList.replace('question-content', 'question-content-active')
   }

  function initQuestions() {
    console.log('draw')
    debugger;
    let allQuestion = document.querySelectorAll('.question')
    console.log('all q ', allQuestion)
    allQuestion.forEach(el => el.addEventListener('click', selectQuestion))
    //let answerBtns = document.querySelectorAll('.btn.btn--answer').forEach(el => el.addEventListener('click', markAsChecked));
  }

  var canvases = []
  var shapes = []
  var canvasesTest = []

  function loadQuestionMap(maps, mapId) {
    maps.forEach(map => {
      console.log('map.mapId', map.mapId);
      console.log('mapId ', mapId)
      if (map.mapId == mapId) {
        console.log('heeeeeeeeeeeeeere', map.data);
        return map.data;
      }
    })
  }

  let testId = '<%= data.result.testRef %>';
  let answerIndexes = '<%= data.result.answersIndexes %>';

  function drawCanvases() {
    console.log('Draw canvnases')
    debugger;

    fetch(`/tests/${testId}`, {
        method: 'GET',
        credentials: 'include'
      }).then(response => response.json())
        .then(data=> {
          debugger;
          let questions = data.test.questions;
          let maps = data.test.maps;
          boundaries = data.test.marksBoundaries;
          console.log('questions: ', questions);
          console.log('maps: ', maps);
          console.log('boundaries ', boundaries);
          console.log('testRef ', data.test._id);
          
          for (let i = 0; i < questions.length; i++) {
            canvases.push(document.querySelector(`#canvas${i}`))
          }

          for (let i = 0; i < questions.length; i++) {
            canvasesTest.push(new fabric.Canvas(canvases[i]));
            let mapData = loadQuestionMap(maps, questions[i].map);
            console.log('mapData ', mapData);

            let mapIndex = maps.findIndex( map => map.mapId == questions[i].map)

            fabric.Image.fromURL(maps[mapIndex].data, function (img) {
              console.log('width of image: ', img.getScaledWidth(), img.getScaledHeight())
              img.scaleToWidth(750, true);
              canvasesTest[i].setDimensions({ width: 750, height: img.getScaledHeight() })
              canvasesTest[i].add(img);
              console.log(questions[i].shapes);
              console.log('heere')
              shapes[i] = JSON.stringify(questions[i].shapes);
              console.log('shapes: ',  shapes[i] )
              canvasesTest[i].loadFromJSON(questions[i].shapes);
              canvasesTest[i].sendToBack(img);
              console.log('objs: ',  canvasesTest[i].getObjects());
            });
        } 
      })} 
  
      window.addEventListener("load", (event) => {
        debugger;
        console.log("page is fully loaded");
        initQuestions();
        drawCanvases();
      });

</script>